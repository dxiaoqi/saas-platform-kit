generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// 用户模型，包含基本信息和登录方式
model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  password          String?
  googleId          String?   @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  accounts          Account[]
  sessions          Session[]

  @@index([email])
  userRole UserRole[]
}

// 账号模型，支持多种登录方式
model Account {
  id                Int       @id @default(autoincrement())
  userId            Int
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// 会话模型，管理用户会话
model Session {
  id                Int       @id @default(autoincrement())
  sessionToken      String    @unique
  userId            Int
  expires           DateTime
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// 验证令牌模型，用于邮箱验证等
model VerificationToken {
  identifier        String
  token             String    @unique
  expires           DateTime
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@unique([identifier, token])
}

model Role {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?
  permissions Permission[]  // 角色包含的权限
  users       UserRole[]    // 具有该角色的用户
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Permission {
  id          Int       @id @default(autoincrement())
  name        String    @unique    // 权限标识符，如 'user:create'
  description String?
  roles       Role[]    // 包含此权限的角色
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// 用户和角色的多对多关联表
model UserRole {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int
  createdAt DateTime @default(now())

  @@id([userId, roleId])
}
